/*****************************************************************
Author: Ankush Varshneya (100853074)
Assignment#2 Part#4 - Dynamic SQL Method 4

1. proc Part4.pc
2. cc -c Part4.c -I/usr/include/oracle/11.2/client64
3. cc -o Part4 Part4.o -L/usr/lib/oracle/11.2/client64/lib -lclntsh
4. ./Part4

This program connects you to ORACLE.
Then it promts user to type a table name 
for which it fetches and then displays each row.
Finally the user types exit to quit.
Note:
  -We will only use SelectList as BindList is not needed.
  -table name to query has a limit of 24 characters.
  -Sql Statements have a limit of 1023 characters.
  -SNUM has a limit of 4 characters.
  -SNAME has a limit of 10 characters.
  -CITY has a limit of 10 characters.
  -PNUM has a limit of 4 characters.
  -PNAME has a limit of 10 characters.
  -COLOR has a limit of 10 characters.
  
This program only processes up to MAX_ITEMS bind variables and
MAX_ITEMS select-list items. MAX_ITEMS is #defined to be 40.
*******************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlda.h> 
#include <sqlcpr.h>

// Maximum number of select-list items.
#define MAX_ITEMS         40

// Maximum lengths of the _names_ of the select-list items or indicator variables.
#define MAX_VNAME_LEN     30
#define MAX_INAME_LEN     30

// Prototypes
int alloc_descriptors(int, int, int);
void process_select_list(void);

exec sql include sqlda;
exec sql include sqlca;

exec sql begin declare section;
  char  *MYID= "oracle/oracle11g";
  char dqlstmt[1024];
  exec sql var dqlstmt is string(1024);
exec sql end declare section;

// selectList holder
SQLDA *selectList;

int main() {
  // Connect to Oracle implicitly
  exec sql connect :MYID;
  if (sqlca.sqlcode == 0)
    printf("Connected to ORACLE\n");
  else {
    printf("Connect Failed\n");
    exit(1);
  }

  // Allocate memory for the select and bind descriptors.
  if (alloc_descriptors(MAX_ITEMS, MAX_VNAME_LEN, MAX_INAME_LEN) != 0)
    exit(1);

  do {
    // Ask user to type the table to query
    char choice[25];
    printf("Type a table to Query (or Q to Exit)> ");
    scanf("%s24", choice);
    
    // If user wants to exit break the loop
    if ((strncmp(choice, "Q", 1) == 0) ||
        (strncmp(choice, "q", 1) == 0))
        break;

    // Otherwize make a statement to select users table
    strcpy(dqlstmt, "SELECT * FROM ");
    strcat(dqlstmt, choice);

    // Prepare the statement and declare a cursor.
    exec sql prepare s from :dqlstmt;
    exec sql declare c cursor for s;
    exec sql open c;

    if (sqlca.sqlcode == 0) {
      // Call the function that processes the select-list.
      // If the statement is not a query, this function
      // just returns, doing nothing.
      process_select_list();
    }  
    else {
      // ORACLE error handler
      printf ("%s",sqlca.sqlerrm.sqlerrmc);
    }

    // Tell user how many rows processed.
    printf("\n\n%d row%c processed.\n", sqlca.sqlerrd[2], sqlca.sqlerrd[2] == 1 ? '\0' : 's');       

  } while (1);

  // free the memory allocated for pointers in the select descriptors.
  int i;
  for (i = 0; i < MAX_ITEMS; i++)
  {    
    if (selectList->V[i] != (char *) 0)
      free(selectList->V[i]);
    free(selectList->I[i]); // MAX_ITEMS were allocated.
  }

  // Free space used by the select descriptor itself.
  sqlclu(selectList);

  exec sql close c;

  exec sql commit work release;
  printf("Bye!\n");  
  exit(0);
}

/*
 *  Allocate the SELECT descriptors using sqlald().
 *  Also allocate the pointers to indicator variables
 *  in each descriptor.  The pointers to the actual bind
 *  variables and the select-list items are realloc'ed in
 *  the set_bind_variables() or process_select_list()
 *  routines.  This routine allocates 1 byte for selectList->V[i]
 *  and bindList->V[i], so the realloc will work correctly.
 */
alloc_descriptors(size, max_vname_len, max_iname_len)
int size;
int max_vname_len;
int max_iname_len;
{
  int i;

  /*
   * The first sqlald parameter determines the maximum number of
   * array elements in each variable in the descriptor. In
   * other words, it determines the maximum number of bind
   * variables or select-list items in the SQL statement.
   *
   * The second parameter determines the maximum length of
   * strings used to hold the names of select-list items
   * or placeholders.  The maximum length of column 
   * names in ORACLE is 30, but you can allocate more or less
   * as needed.
   *
   * The third parameter determines the maximum length of
   * strings used to hold the names of any indicator
   * variables.  To follow ORACLE standards, the maximum
   * length of these should be 30.  But, you can allocate
   * more or less as needed.
   */

  if ((selectList =
      sqlald (size, max_vname_len, max_iname_len)) == (SQLDA *) 0)
  {
    fprintf(stderr,
      "Cannot allocate memory for select descriptor.");
    return -1;
  }
  selectList->N = MAX_ITEMS;

  /* Allocate the pointers to the indicator variables, and the actual data. */
  for (i = 0; i < MAX_ITEMS; i++) {
    selectList->I[i] = (short *) malloc(sizeof(short));
    selectList->V[i] = (char *) malloc(1);
  }
 
  return 0;
}

void process_select_list() {
    int i, null_ok, precision, scale;

    /* If the SQL statement is a SELECT, describe the
        select-list items.  The DESCRIBE function returns
        their names, datatypes, lengths (including precision
        and scale), and NULL/NOT NULL statuses. */

    selectList->N = MAX_ITEMS;
    
    exec sql describe select list for s into selectList;

    /* If F is negative, there were more select-list
       items than originally allocated by sqlald(). */
    if (selectList->F < 0)
    {
        printf ("\nToo many select-list items (%d), maximum is %d\n",
                -(selectList->F), MAX_ITEMS);
        return;
    }

    /* Set the maximum number of array elements in the
       descriptor to the number found. */
    selectList->N = selectList->F;

    /* Allocate storage for each select-list item.
  
       sqlprc() is used to extract precision and scale
       from the length (selectList->L[i]).

       sqlnul() is used to reset the high-order bit of
       the datatype and to check whether the column
       is NOT NULL.

       CHAR    datatypes have length, but zero precision and
               scale.  The length is defined at CREATE time.

       NUMBER  datatypes have precision and scale only if
               defined at CREATE time.  If the column
               definition was just NUMBER, the precision
               and scale are zero, and you must allocate
               the required maximum length.

       DATE    datatypes return a length of 7 if the default
               format is used.  This should be increased to
               9 to store the actual date character string.
               If you use the TO_CHAR function, the maximum
               length could be 75, but will probably be less
               (you can see the effects of this in SQL*Plus).

       ROWID   datatype always returns a fixed length of 18 if
               coerced to CHAR.

       LONG and
       LONG RAW datatypes return a length of 0 (zero),
               so you need to set a maximum.  In this example,
               it is 240 characters.

       */
    
    printf ("\n");
    for (i = 0; i < selectList->F; i++)
    {
        char title[MAX_VNAME_LEN]; 
        /* Turn off high-order bit of datatype (in this example,
           it does not matter if the column is NOT NULL). */
        sqlnul ((unsigned short *)&(selectList->T[i]), (unsigned short *)&(selectList->T[i]), &null_ok);

        switch (selectList->T[i])
        {
            case  1 : /* CHAR datatype: no change in length
                         needed, except possibly for TO_CHAR
                         conversions (not handled here). */
                break;
            case  2 : /* NUMBER datatype: use sqlprc() to
                         extract precision and scale. */
                sqlprc ((unsigned long *)&(selectList->L[i]), &precision, &scale);
                      /* Allow for maximum size of NUMBER. */
                if (precision == 0) precision = 40;
                      /* Also allow for decimal point and
                         possible sign. */
                /* convert NUMBER datatype to FLOAT if scale > 0,
                   INT otherwise. */
                if (scale > 0)
                    selectList->L[i] = sizeof(float);
                else
                    selectList->L[i] = sizeof(int);
                break;

            case  8 : /* LONG datatype */
                selectList->L[i] = 240;
                break;

            case 11 : /* ROWID datatype */
            case 104 : /* Universal ROWID datatype */
                selectList->L[i] = 18;
                break;

            case 12 : /* DATE datatype */
                selectList->L[i] = 9;
                break;
 
            case 23 : /* RAW datatype */
                break;

            case 24 : /* LONG RAW datatype */
                selectList->L[i] = 240;
                break;
        }
        /* Allocate space for the select-list data values.
           sqlald() reserves a pointer location for
           V[i] but does not allocate the full space for
           the pointer.  */

         if (selectList->T[i] != 2)
           selectList->V[i] = (char *) realloc(selectList->V[i],
                                    selectList->L[i] + 1);  
         else
           selectList->V[i] = (char *) realloc(selectList->V[i],
                                    selectList->L[i]);  

        /* Print column headings, right-justifying number
            column headings. */
        
        /* Copy to temporary buffer in case name is null-terminated */
        memset(title, ' ', MAX_VNAME_LEN);
        strncpy(title, selectList->S[i], selectList->C[i]);
        if (selectList->T[i] == 2)
           if (scale > 0)
             printf ("%.*s ", selectList->L[i]+3, title);
           else
             printf ("%.*s ", selectList->L[i], title);
        else
          printf("%-.*s ", selectList->L[i], title);

        /* Coerce ALL datatypes except for LONG RAW and NUMBER to
           character. */
        if (selectList->T[i] != 24 && selectList->T[i] != 2)
            selectList->T[i] = 1;

        /* Coerce the datatypes of NUMBERs to float or int depending on
           the scale. */
        if (selectList->T[i] == 2)
          if (scale > 0)
             selectList->T[i] = 4;  /* float */
          else
             selectList->T[i] = 3;  /* int */
    }
    printf ("\n");
    
    /*print the underline below the titles*/
    for (i = 0; i < selectList->F; i++)
    {
        char title[MAX_VNAME_LEN]; 
        int j;
        
        /* Print column headings, right-justifying number
            column headings. */
        
        /* Copy to temporary buffer in case name is null-terminated */
        memset(title, ' ', MAX_VNAME_LEN);
        strncpy(title, selectList->S[i], selectList->C[i]);
        if (selectList->T[i] == 2)
           if (scale > 0)
             for (j = 0; j < selectList->L[i]+3; j++)
                putchar('-');
           else
             for (j = 0; j < selectList->L[i]; j++)
                putchar('-');
        else
           for (j = 0; j < selectList->L[i]; j++)
              putchar('-');
        putchar(' ');
    }
    printf ("\n\n");

    /* FETCH each row selected and print the column values. */
    exec sql whenever not found goto end_select_loop;

    for (;;)
    {
        exec sql fetch c using descriptor selectList;

        /* Since each variable returned has been coerced to a
           character string, int, or float very little processing 
           is required here.  This routine just prints out the 
           values on the terminal. */
        for (i = 0; i < selectList->F; i++)
        {
            if (*selectList->I[i] < 0)
                if (selectList->T[i] == 4) 
                  printf ("%-*c ",(int)selectList->L[i]+3, ' ');
                else
                  printf ("%-*c ",(int)selectList->L[i], ' ');
            else
                if (selectList->T[i] == 3)     /* int datatype */
                  printf ("%*d ", (int)selectList->L[i], 
                                 *(int *)selectList->V[i]);
                else if (selectList->T[i] == 4)     /* float datatype */
                  printf ("%*.2f ", (int)selectList->L[i], 
                                 *(float *)selectList->V[i]);
                else                          /* character string */
                  printf ("%-*.*s ", (int)selectList->L[i],
                            (int)selectList->L[i], selectList->V[i]);
        }
        printf ("\n");
    }
end_select_loop:
    return;
}